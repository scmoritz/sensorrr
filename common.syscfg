/**
 * These arguments were used when this file was generated. They will be automatically applied on subsequent loads
 * via the GUI or CLI. Run CLI with '--help' for additional information on how to override these arguments.
 * @cliArgs --board "/ti/boards/CC3220SF_LAUNCHXL" --product "simplelink_cc32xx_sdk@4_20_00_07"
 * @versions {"data":"2020052512","timestamp":"2020052512","tool":"1.5.0+1397","templates":"2020052512"}
 */

/**
 * Import the modules used in this configuration.
 */
const DriverLib      = scripting.addModule("/ti/devices/DriverLib");
const ADC            = scripting.addModule("/ti/drivers/ADC", {}, false);
const ADC1           = ADC.addInstance();
const Board          = scripting.addModule("/ti/drivers/Board");
const Crypto         = scripting.addModule("/ti/drivers/Crypto");
const Crypto1        = Crypto.addInstance();
const DMA            = scripting.addModule("/ti/drivers/DMA");
const GPIO           = scripting.addModule("/ti/drivers/GPIO");
const GPIO1          = GPIO.addInstance();
const GPIO2          = GPIO.addInstance();
const GPIO3          = GPIO.addInstance();
const GPIO4          = GPIO.addInstance();
const GPIO5          = GPIO.addInstance();
const GPIO6          = GPIO.addInstance();
const GPIO7          = GPIO.addInstance();
const GPIO8          = GPIO.addInstance();
const GPIO9          = GPIO.addInstance();
const I2C            = scripting.addModule("/ti/drivers/I2C", {}, false);
const I2C1           = I2C.addInstance();
const PWM            = scripting.addModule("/ti/drivers/PWM", {}, false);
const PWM1           = PWM.addInstance();
const Power          = scripting.addModule("/ti/drivers/Power");
const SPI            = scripting.addModule("/ti/drivers/SPI");
const SPI1           = SPI.addInstance();
const Timer          = scripting.addModule("/ti/drivers/Timer");
const Timer1         = Timer.addInstance();
const UART           = scripting.addModule("/ti/drivers/UART", {}, false);
const UART1          = UART.addInstance();
const Watchdog       = scripting.addModule("/ti/drivers/Watchdog");
const Watchdog1      = Watchdog.addInstance();
const SimpleLinkWifi = scripting.addModule("/ti/drivers/net/wifi/SimpleLinkWifi");
const SlNet          = scripting.addModule("/ti/net/SlNet");
const SlNet1         = SlNet.addInstance();

/**
 * Write custom configuration values to the imported modules.
 */
ADC1.$name              = "CONFIG_ADC_0";
ADC1.adc.adcPin.$assign = "boosterpack.26";

Crypto1.$name = "CONFIG_Crypto_0";

GPIO1.$hardware       = system.deviceData.board.components.LED_RED;
GPIO1.outputStrength  = "High";
GPIO1.$name           = "CONFIG_GPIO_LED_0";
GPIO1.gpioPin.$assign = "boosterpack.29";

GPIO2.$name           = "CONFIG_GPIO_0";
GPIO2.mode            = "Output";
GPIO2.gpioPin.$assign = "boosterpack.5";

GPIO3.$name           = "CONFIG_GPIO_1";
GPIO3.mode            = "Output";
GPIO3.gpioPin.$assign = "boosterpack.2";

GPIO4.$name           = "CONFIG_GPIO_2";
GPIO4.mode            = "Output";
GPIO4.gpioPin.$assign = "boosterpack.13";

GPIO5.$name           = "CONFIG_GPIO_3";
GPIO5.mode            = "Output";
GPIO5.gpioPin.$assign = "boosterpack.27";

GPIO6.$name     = "CONFIG_GPIO_4";
GPIO6.mode      = "Output";
GPIO6.$hardware = system.deviceData.board.components.LED_YELLOW;

GPIO7.$name           = "CONFIG_GPIO_5";
GPIO7.mode            = "Output";
GPIO7.gpioPin.$assign = "boosterpack.30";

GPIO8.$name           = "CONFIG_GPIO_6";
GPIO8.mode            = "Output";
GPIO8.gpioPin.$assign = "boosterpack.8";

GPIO9.$name           = "CONFIG_GPIO_7";
GPIO9.mode            = "Output";
GPIO9.gpioPin.$assign = "boosterpack.19";

I2C1.$name              = "CONFIG_I2C";
I2C1.i2c.sdaPin.$assign = "boosterpack.14";
I2C1.i2c.sclPin.$assign = "boosterpack.7";

PWM1.$name                = "CONFIG_PWM_0";
PWM1.$hardware            = system.deviceData.board.components.LED_GREEN;
PWM1.timer.pwmPin.$assign = "boosterpack.10";

Power.ioRetentionShutdown = ["GRP_1"];
Power.parkPins.$name      = "ti_drivers_power_PowerCC32XXPins0";

SPI1.mode                     = "Four Pin SS Active Low";
SPI1.defaultTxBufferValue     = "0";
SPI1.$name                    = "CONFIG_SPI";
SPI1.spi.$assign              = "SPI0";
SPI1.spi.sclkPin.$assign      = "boosterpack.17";
SPI1.spi.misoPin.$assign      = "boosterpack.28";
SPI1.spi.mosiPin.$assign      = "boosterpack.15";
SPI1.spi.ssPin.$assign        = "boosterpack.18";
SPI1.spi.dmaRxChannel.$assign = "UDMA_CH6";
SPI1.spi.dmaTxChannel.$assign = "UDMA_CH7";

Timer1.$name         = "CONFIG_TIMER_0";
Timer1.timerType     = "32 Bits";
Timer1.timer.$assign = "Timer0";

UART1.$name         = "CONFIG_UART_0";
UART1.dataDirection = "Send Only";

Watchdog1.$name            = "CONFIG_WATCHDOG_0";
Watchdog1.watchdog.$assign = "WATCHDOG0";

SlNet1.$name  = "CONFIG_SLNET";
SlNet1.ifName = "CC32xx";

/**
 * Pinmux solution for unlocked pins/peripherals. This ensures that minor changes to the automatic solver in a future
 * version of the tool will not impact the pinmux you originally saw.  These lines can be completely deleted in order to
 * re-solve from scratch.
 */
ADC1.adc.$suggestSolution         = "ADC0";
GPIO6.gpioPin.$suggestSolution    = "boosterpack.9";
I2C1.i2c.$suggestSolution         = "I2C0";
PWM1.timer.$suggestSolution       = "Timer3";
UART1.uart.$suggestSolution       = "UART0";
UART1.uart.txPin.$suggestSolution = "boosterpack.4";
